// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'reddit_link_data.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$_RedditLinkData _$$_RedditLinkDataFromJson(Map<String, dynamic> json) =>
    _$_RedditLinkData(
      id: json['id'] as String,
      allowLiveComments: json['allow_live_comments'] as bool,
      archived: json['archived'] as bool,
      author: json['author'] as String,
      authorIsBlocked: json['author_is_blocked'] as bool,
      authorFullname: json['author_fullname'] as String,
      authorPatreonFlair: json['author_patreon_flair'] as bool,
      authorPremium: json['author_premium'] as bool,
      canGild: json['can_gild'] as bool,
      canModPost: json['can_mod_post'] as bool,
      clicked: json['clicked'] as bool,
      contestMode: json['contest_mode'] as bool,
      created: (json['created'] as num).toDouble(),
      createdUtc: (json['created_utc'] as num).toDouble(),
      domain: json['domain'] as String,
      downs: json['downs'] as int,
      gilded: json['gilded'] as int,
      hidden: json['hidden'] as bool,
      hideScore: json['hide_score'] as bool,
      isCreatedFromAdsUi: json['is_created_from_ads_ui'] as bool,
      isCrosspostable: json['is_crosspostable'] as bool,
      isMeta: json['is_meta'] as bool,
      isOriginalContent: json['is_original_content'] as bool,
      isRedditMediaDomain: json['is_reddit_media_domain'] as bool,
      isRobotIndexable: json['is_robot_indexable'] as bool,
      isSelf: json['is_self'] as bool,
      isVideo: json['is_video'] as bool,
      locked: json['locked'] as bool,
      mediaOnly: json['media_only'] as bool,
      name: json['name'] as String,
      noFollow: json['no_follow'] as bool,
      numComments: json['num_comments'] as int,
      numCrossposts: json['num_crossposts'] as int,
      over18: json['over_18'] as bool,
      parentWhitelistStatus: json['parent_whitelist_status'] as String,
      permalink: json['permalink'] as String,
      pinned: json['pinned'] as bool,
      pwls: json['pwls'] as int,
      quarantine: json['quarantine'] as bool,
      saved: json['saved'] as bool,
      score: json['score'] as int,
      sendReplies: json['send_replies'] as bool,
      spoiler: json['spoiler'] as bool,
      stickied: json['stickied'] as bool,
      subreddit: json['subreddit'] as String,
      subredditId: json['subreddit_id'] as String,
      subredditNamePrefixed: json['subreddit_name_prefixed'] as String,
      subredditSubscribers: json['subreddit_subscribers'] as int,
      subredditType: json['subreddit_type'] as String,
      thumbnail: json['thumbnail'] as String,
      title: json['title'] as String,
      totalAwardsReceived: json['total_awards_received'] as int,
      ups: json['ups'] as int,
      upvoteRatio: (json['upvote_ratio'] as num).toDouble(),
      url: json['url'] as String,
      visited: json['visited'] as bool,
      whitelistStatus: json['whitelist_status'] as String,
      wls: json['wls'] as int,
      authorFlairBackgroundColor:
          json['author_flair_background_color'] as String?,
      authorFlairCssClass: json['author_flair_css_class'] as String?,
      authorFlairText: json['author_flair_text'] as String?,
      authorFlairTextColor: json['author_flair_text_color'] as String?,
      authorFlairType: json['author_flair_type'] as String?,
      linkFlairBackgroundColor: json['link_flair_background_color'] as String?,
      linkFlairCssClass: json['link_flair_css_class'] as String?,
      linkFlairTextColor: json['link_flair_text_color'] as String?,
      linkFlairType: json['link_flair_type'] as String?,
      linkFlairTemplateId: json['link_flair_template_id'] as String?,
      linkFlairText: json['link_flair_text'] as String?,
      numReports: json['num_reports'] as int?,
      postHint: json['post_hint'] as String?,
      preview: json['preview'] == null
          ? null
          : RedditPreview.fromJson(json['preview'] as Map<String, dynamic>),
      thumbnailHeight: json['thumbnail_height'] as int?,
      thumbnailWidth: json['thumbnail_width'] as int?,
      selftext: json['selftext'] as String?,
      selftextHtml: json['selftext_html'] as String?,
      viewCount: json['view_count'] as int?,
      allAwardings: json['all_awardings'],
      awarders: json['awarders'],
      approvedAtUtc: json['approved_at_utc'],
      approvedBy: json['approved_by'],
      authorFlairRichText: json['author_flair_rich_text'],
      authorFlairTemplateId: json['author_flair_template_id'],
      bannedAtUtc: json['banned_at_utc'],
      bannedBy: json['banned_by'],
      category: json['category'],
      contentCategories: json['content_categories'],
      discussionType: json['discussion_type'],
      distinguished: json['distinguished'],
      gildings: json['gildings'],
      edited: json['edited'],
      likes: json['likes'],
      media: json['media'],
      mediaEmbed: json['media_embed'],
      modNote: json['mod_note'],
      modReasonBy: json['mod_reason_by'],
      modReasonTitle: json['mod_reason_title'],
      modReports: json['mod_reports'],
      reportReasons: json['report_reasons'],
      removalReason: json['removal_reason'],
      removedBy: json['removed_by'],
      removedByCategory: json['removed_by_category'],
      secureMedia: json['secure_media'],
      secureMediaEmbed: json['secure_media_embed'],
      suggestedSort: json['suggested_sort'],
      topAwardedType: json['top_awarded_type'],
      treatmentTags: json['treatment_tags'],
      userReports: json['user_reports'],
    );

Map<String, dynamic> _$$_RedditLinkDataToJson(_$_RedditLinkData instance) =>
    <String, dynamic>{
      'id': instance.id,
      'allow_live_comments': instance.allowLiveComments,
      'archived': instance.archived,
      'author': instance.author,
      'author_is_blocked': instance.authorIsBlocked,
      'author_fullname': instance.authorFullname,
      'author_patreon_flair': instance.authorPatreonFlair,
      'author_premium': instance.authorPremium,
      'can_gild': instance.canGild,
      'can_mod_post': instance.canModPost,
      'clicked': instance.clicked,
      'contest_mode': instance.contestMode,
      'created': instance.created,
      'created_utc': instance.createdUtc,
      'domain': instance.domain,
      'downs': instance.downs,
      'gilded': instance.gilded,
      'hidden': instance.hidden,
      'hide_score': instance.hideScore,
      'is_created_from_ads_ui': instance.isCreatedFromAdsUi,
      'is_crosspostable': instance.isCrosspostable,
      'is_meta': instance.isMeta,
      'is_original_content': instance.isOriginalContent,
      'is_reddit_media_domain': instance.isRedditMediaDomain,
      'is_robot_indexable': instance.isRobotIndexable,
      'is_self': instance.isSelf,
      'is_video': instance.isVideo,
      'locked': instance.locked,
      'media_only': instance.mediaOnly,
      'name': instance.name,
      'no_follow': instance.noFollow,
      'num_comments': instance.numComments,
      'num_crossposts': instance.numCrossposts,
      'over_18': instance.over18,
      'parent_whitelist_status': instance.parentWhitelistStatus,
      'permalink': instance.permalink,
      'pinned': instance.pinned,
      'pwls': instance.pwls,
      'quarantine': instance.quarantine,
      'saved': instance.saved,
      'score': instance.score,
      'send_replies': instance.sendReplies,
      'spoiler': instance.spoiler,
      'stickied': instance.stickied,
      'subreddit': instance.subreddit,
      'subreddit_id': instance.subredditId,
      'subreddit_name_prefixed': instance.subredditNamePrefixed,
      'subreddit_subscribers': instance.subredditSubscribers,
      'subreddit_type': instance.subredditType,
      'thumbnail': instance.thumbnail,
      'title': instance.title,
      'total_awards_received': instance.totalAwardsReceived,
      'ups': instance.ups,
      'upvote_ratio': instance.upvoteRatio,
      'url': instance.url,
      'visited': instance.visited,
      'whitelist_status': instance.whitelistStatus,
      'wls': instance.wls,
      'author_flair_background_color': instance.authorFlairBackgroundColor,
      'author_flair_css_class': instance.authorFlairCssClass,
      'author_flair_text': instance.authorFlairText,
      'author_flair_text_color': instance.authorFlairTextColor,
      'author_flair_type': instance.authorFlairType,
      'link_flair_background_color': instance.linkFlairBackgroundColor,
      'link_flair_css_class': instance.linkFlairCssClass,
      'link_flair_text_color': instance.linkFlairTextColor,
      'link_flair_type': instance.linkFlairType,
      'link_flair_template_id': instance.linkFlairTemplateId,
      'link_flair_text': instance.linkFlairText,
      'num_reports': instance.numReports,
      'post_hint': instance.postHint,
      'preview': instance.preview,
      'thumbnail_height': instance.thumbnailHeight,
      'thumbnail_width': instance.thumbnailWidth,
      'selftext': instance.selftext,
      'selftext_html': instance.selftextHtml,
      'view_count': instance.viewCount,
      'all_awardings': instance.allAwardings,
      'awarders': instance.awarders,
      'approved_at_utc': instance.approvedAtUtc,
      'approved_by': instance.approvedBy,
      'author_flair_rich_text': instance.authorFlairRichText,
      'author_flair_template_id': instance.authorFlairTemplateId,
      'banned_at_utc': instance.bannedAtUtc,
      'banned_by': instance.bannedBy,
      'category': instance.category,
      'content_categories': instance.contentCategories,
      'discussion_type': instance.discussionType,
      'distinguished': instance.distinguished,
      'gildings': instance.gildings,
      'edited': instance.edited,
      'likes': instance.likes,
      'media': instance.media,
      'media_embed': instance.mediaEmbed,
      'mod_note': instance.modNote,
      'mod_reason_by': instance.modReasonBy,
      'mod_reason_title': instance.modReasonTitle,
      'mod_reports': instance.modReports,
      'report_reasons': instance.reportReasons,
      'removal_reason': instance.removalReason,
      'removed_by': instance.removedBy,
      'removed_by_category': instance.removedByCategory,
      'secure_media': instance.secureMedia,
      'secure_media_embed': instance.secureMediaEmbed,
      'suggested_sort': instance.suggestedSort,
      'top_awarded_type': instance.topAwardedType,
      'treatment_tags': instance.treatmentTags,
      'user_reports': instance.userReports,
    };
